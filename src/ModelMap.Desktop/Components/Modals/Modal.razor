
<div class="modal fade" tabindex="-1" id="@_id">
    <div class="modal-dialog
    @(Size == ModalSize.Small ? "modal-sm" :
        Size == ModalSize.Large ? "modal-lg" :
            Size == ModalSize.ExtraLarge ? "modal-xl" : string.Empty)">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="btn-close" @onclick="HideAsync"></button>
            </div>
            <div class="modal-body">
                @ModalBody
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideAsync">Close</button>
                <button type="button" class="btn btn-primary" @onclick="SaveAsync">Save changes</button>
            </div>
        </div>
    </div>
</div>

@code{
    private Lazy<Task<IJSObjectReference>> _jsTask;

    private string _id = Guid.NewGuid().ToString("N");

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment ModalBody { get; set; }

    [Parameter]
    public ModalSize Size { get; set; }

    [Parameter]
    public EventCallback ModalSaveClickCallBack { get; set; }

    [Inject]
    private IJSRuntime JsRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        _jsTask = _jsTask = new Lazy<Task<IJSObjectReference>>(() => JsRuntime.InvokeAsync<IJSObjectReference>(
            "import", "./modal.js").AsTask());
    }

    public async Task ShowAsync()
    {
        var js = await _jsTask.Value;
        await js.InvokeVoidAsync("show", _id);
    }

    public async Task HideAsync()
    {
        var js = await _jsTask.Value;
        await js.InvokeVoidAsync("hide", _id);
    }

    public async Task SaveAsync()
    {
        await ModalSaveClickCallBack.InvokeAsync();
        await HideAsync();
    }
}