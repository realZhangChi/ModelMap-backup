@page "/designer/{SolutionPath}"
@using ModelMap.Solutions
@using ModelMap.Desktop.Components.SolutionTrees
@using ModelMap.Desktop.Components.Canvas
@using ModelMap.Desktop.Components.ContextMenus
@using ModelMap.Desktop.Models.ContextMenus
@using ModelMap.Desktop.Services.Solution

<div>
    <SolutionSidebar @ref="_solutionSidebar" Root="Solution?.RootNode" OnMouseUpCallBack="ShowContextMenuAsync"></SolutionSidebar>

    <div class="content">
        <FabricCanvas @ref="_fabricCanvas" />
    </div>
</div>

<ContextMenu @ref="_contextMenu"></ContextMenu>

<Modal @ref="_entityModal" Title="Add New Entity" Size="ModalSize.Large" ModalSaveClickCallBack="AddEntityAsync">
    <ModalBody>
        <div class="mb-3">
            <label class="form-label" for="entityName">Name</label>
            <input type="text" class="form-control" id="entityName" @bind="_entityModel.Name" />
        </div>
        <CascadingValue Value="_entityModel">
            <PropertyEditor />
        </CascadingValue>
    </ModalBody>
</Modal>

@code {

    private SolutionSidebar _solutionSidebar;

    private ContextMenu _contextMenu;

    private Modal _entityModal;

    private EntityComponentModel _entityModel;

    private FabricCanvas _fabricCanvas;

    [Parameter]
    public string SolutionPath { get; set; }

    [Inject]
    public ISolutionService SolutionService { get; set; }

    protected SolutionTreeDto Solution { get; set; }


    public Designer()
    {
        _entityModel = new EntityComponentModel();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        Solution = await SolutionService.GetSolutionModelAsync(SolutionPath);
    }

    private Task ShowContextMenuAsync(MouseEventArgs e)
    {
        if (e.Button != 2)
        {
            return Task.CompletedTask;
        }

        var selectedNode = _solutionSidebar.SelectedNodeReference;
        var option = new ContextMenuOptionModel(
                            "Add New Entity",
                            EventCallback.Factory.Create(this, ShowAddEntityModalAsync)
                            );
        return _contextMenu.ShowAsync(
            new()
            {
                option
            },
            e.ClientX,
            e.ClientY);
    }


    private Task ShowAddEntityModalAsync()
    {
        return _entityModal.ShowAsync();
    }

    private async Task AddEntityAsync()
    {
        await _fabricCanvas.AddEntityAsync(_entityModel);

    }

}