@page "/"
@using ModelMap.Desktop.Services.File
@using ModelMap.Solutions

<div class="container mt-5">
    <div class="p-5">

        <h1>Welcome! </h1>

        <div class="mt-3">
            <button class="btn btn-primary" @onclick="OnOpenSolutionClickedAsync">
                <i class="fa fa-folder-open"></i> Open
            </button>
        </div>

        <div class="mt-5">
            <h6>recent:</h6>
            <div class="list-group list-group-flush mt-2">
                @foreach (var solution in RecentlySolutions)
                {
                    <a href="/designer/@solution.Id" class="list-group-item list-group-item-action">
                        <small>@solution.AbsolutePath</small>
                    </a>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Lazy<Task<IJSObjectReference>> _jsTask;

    [Inject]
    private IJSRuntime JsRuntime { get; set; }

    [Inject]
    protected IFileService FileService { get; set; }

    [Inject]
    protected NavigationManager NavigationManager { get; set; }

    [Inject]
    protected ISolutionAppService SolutionAppService { get; set; }

    protected ICollection<SolutionDto> RecentlySolutions { get; private set; }

    public Index()
    {

        RecentlySolutions = new List<SolutionDto>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _jsTask = new Lazy<Task<IJSObjectReference>>(() => JsRuntime.InvokeAsync<IJSObjectReference>(
            "import", "./index.js").AsTask());
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        var solutions = (ICollection<SolutionDto>)(await SolutionAppService.GetListAsync(new SolutionPagedResultRequestDto()
        {
            SkipCount = 0,
            MaxResultCount = 10
        })).Items;
        RecentlySolutions = solutions;
    }

    private async Task OnOpenSolutionClickedAsync()
    {
        var solutionPath = await FileService.SelectFileAsync();
        var solution = await SolutionAppService.CreateAsync(new CreateSolutionDto()
        {
            AbsolutePath = solutionPath
        });
        NavigationManager.NavigateTo($"designer/{solution.Id}");
    }

    }
